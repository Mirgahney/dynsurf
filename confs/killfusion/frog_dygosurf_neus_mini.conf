general {
    base_exp_dir = ./exp/CASE_NAME/result
    recording = [
        ./,
        ./models,
        ./models/LieAlgebra,
    ]
}

dataset {
    data_dir = /mnt/data/deepdeform/test/seq004 #/mnt/data/KillingFusion/kfusion_frog ##/jmain02/home/J2AD021/dxt03/mmm91-dxt03/data/KillingFusion/kfusion_frog # ./datasets/CASE_NAME/
    render_cameras_name = cameras_sphere.npz
    object_cameras_name = cameras_sphere.npz
    # Camera
    is_monocular = True # if the camera setting is monocular, set True

    # Depth
    use_depth = True
    # scale factor of depth
    # e.g. a pixel value of 1000 in the depth image corresponds to a distance of 1 meter from the camera.
    depth_scale = 1000.
    # Camera
    camera_trainable = False #True
    # Train skip
    trainskip = 1 #2 #10
    max_length = 200 #140 #200
    # image sampling strategy
    image_based = True
}

train {
   learning_rate = 5e-4
    learning_rate_alpha = 0.05
    end_iter = 20000 #60000 #120000
    batch_size = 1024 #4096 #1024 # 2048
    validate_resolution_level = 4
    warm_up_end = 800 #5000
    anneal_end = 0
    igr_weight = 0.5
    mask_weight = 0.5
    # Depth
    geo_weight = 5.0
    angle_weight = 0.0 #0.5
    # our losses
    sdf_weight = 0.5
    fs_weight = 2.0
    surf_sdf = 0.0
    smooth_weight = 1.0
    # Deform
    use_deform = True
    use_topo = False
    use_bijective = True
    use_global_rigid = False
    use_app = False #True
    use_pts = False #True
    bij_type = ndr
    # Anneal. Coarse-to-Fine Optimization.
    max_pe_iter = 10000 #70000

    save_freq = 10000
    val_freq = 10000
    val_mesh_freq = 10000
    report_freq = 10000

    validate_idx = -1 # index of validation

    truncation = 0.08  # 0.08
    back_truncation = 0.5

    # image sampling strategy
    sample_sequential = False #True

    # Rendering
    n_samples = 96
    near = 0
    far = 5
    perturb = True
    range_d = 0.1
    n_samples_d = 21
    n_importance = 21
    trunc = 0.05
    sc_factor = 1
}

test {
    test_batch_size = 3072
}

model {
    # Deform
    deform_network {
        d_feature = 64
        d_in = 3
        d_out_1 = 1 # t
        d_out_2 = 3 # (r,t) in 2d
        n_blocks = 3
        d_hidden = 128 #64
        n_layers = 1
        skip_in = []
        multires = 6 #6
        weight_norm = True
    }

    # Deform
    topo_network {
        d_feature = 64
        d_in = 3
        d_out = 2 #4 #2
        d_hidden = 64
        n_layers = 7
        skip_in = [5]
        multires = 5
        bias = 0.0
        weight_norm = True
        use_topo = False
        axis_aligned = False #True
    }

    feature_grid {
    feat_dims = [14, 10, 4] #[28] #[12, 8, 4] #[12, 8, 2] #[12, 10, 4]
    #[14, 10, 4] #[14, 10, 8] #[16, 12, 8] #[26] #[14] #[14, 10, 4] #[22] ##[14, 10, 4, 4] # [18, 12, 8] # [18, 12] ## [14, 8, 4] #[10, 4, 4]
    res = 134 #99 #199 #149 #99 #124 #34 #124 #124 #74 ##124 #149
    rgb_dim = 6 #8 ##6
    pg_scale = [] #[75, 100] #[6500, 9000] #[10000, 15000]#[5000, 10000]
    feat_scale = [2] #[2] #[2, 1.2, 1]
    type = normal #['normal', 'Gaussian', 'MLP', 'AmbMLP', 'AmbMLPB']
    }

    sdf_network {
        d_out = 257
        d_in_1 = 22 #18 #16 #20
        #22 #26 #30 #20 #8 #22 #16 ##24 #30 #22 ##18 #20 #12 #3
        d_in_2 = 0 #5 #69 #2 + 3 + 64 #4 #2 # use_topo dim
        d_hidden = 32 #64 #32 #256
        n_layers = 2 #8
        skip_in = [] #[4]
        multires = 0 #6
        multires_topo = 1 # use_topo
        bias = 0.5
        scale = 1.0
        geometric_init = True
        weight_norm = False #True
    }

    variance_network {
        init_val = 0.3
    }

    rendering_network {
        d_feature = 64 #32 #256
        mode = idr
        d_in = 6 #8 #6+2 #8 #6 #9
        d_out = 3
        d_hidden = 32 #64 #32 #256
        n_layers = 2 #4
        weight_norm = False #True
        multires_view = 0 #4
        squeeze_out = True
    }

    # Deform
    appearance_rendering_network {
        d_feature = 6 #8 #6 #256
        d_global_feature = 64
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 32 #64 #256
        n_layers = 2 #4
        weight_norm = True
        multires_view = 4
        squeeze_out = True
    }

    neus_renderer {
        begin_n_samples = 64 #32 #64
        end_n_samples = 48 #16
        important_begin_iter = 5000 #30000
        n_importance = 48 #32 #64
        up_sample_steps = 4
        perturb = 1.0
    }
}