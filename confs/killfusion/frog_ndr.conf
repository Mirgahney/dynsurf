general {
    base_exp_dir = ../exp/CASE_NAME/result
    recording = [
        ../,
        ../models,
        ../models/LieAlgebra,
    ]
}

dataset {
    data_dir = /jmain02/home/J2AD021/dxt03/mmm91-dxt03/data/KillingFusion/kfusion_frog #/mnt/data/KillingFusion/kfusion_frog # kfusion_duck, kfusion_snoopy
    render_cameras_name = cameras_sphere.npz
    object_cameras_name = cameras_sphere.npz
    # Camera
    is_monocular = True # if the camera setting is monocular, set True

    # Depth
    use_depth = True
    # Predicted depth anf normals
    use_pred_depth = False
    # scale factor of depth
    # e.g. a pixel value of 1000 in the depth image corresponds to a distance of 1 meter from the camera.
    depth_scale = 1000.
    # Use bilateral smoothness on depth maps
    bilateral_depth = False
    # Camera
    camera_trainable = True
    # Train skip
    trainskip = 1 #2 #10
    max_length = 200

    # image sampling strategy
    image_based = True
}

train {
    learning_rate = 5e-4
    learning_rate_alpha = 0.05
    end_iter = 120000 #100000 #
    batch_size = 2048 #1024 #
    validate_resolution_level = 4
    warm_up_end = 5000
    anneal_end = 0
    igr_weight = 0.5
    mask_weight = 0.5
    # Depth
    geo_weight = 5.0
    angle_weight = 0.5
    # Deform
    use_deform = True
    use_topo = True
    use_bijective = True
    # Anneal. Coarse-to-Fine Optimization.
    max_pe_iter = 70000

    save_freq = 10000
    val_freq = 10000
    val_mesh_freq = 10000
    report_freq = 10000

    validate_idx = -1 # index of validation

    # image sampling strategy
    sample_sequential = False #True
}

test {
    test_batch_size = 3072
}

model {
    # Deform
    deform_network {
        d_feature = 64
        d_in = 3
        d_out_1 = 1 # t
        d_out_2 = 3 # (r,t) in 2d
        n_blocks = 3
        d_hidden = 128
        n_layers = 1
        skip_in = []
        multires = 6
        weight_norm = True
    }

    # Deform
    topo_network {
        d_feature = 64
        d_in = 3
        d_out = 2
        d_hidden = 64
        n_layers = 7
        skip_in = [5]
        multires = 6
        bias = 0.0
        weight_norm = True
        use_topo = True
    }

    sdf_network {
        d_out = 257
        d_in_1 = 3
        d_in_2 = 2 # use_topo dim
        d_hidden = 256
        n_layers = 8
        skip_in = [4]
        multires = 6
        multires_topo = 1 # use_topo
        bias = 0.5
        scale = 1.0
        geometric_init = True
        weight_norm = True
    }

    variance_network {
        init_val = 0.3
    }

    rendering_network {
        d_feature = 256
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 4
        weight_norm = True
        multires_view = 4
        squeeze_out = True
    }

    # Deform
    appearance_rendering_network {
        d_feature = 256
        d_global_feature = 64
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 4
        weight_norm = True
        multires_view = 4
        squeeze_out = True
    }

    neus_renderer {
        begin_n_samples = 64
        end_n_samples = 16
        important_begin_iter = 40000
        n_importance = 64
        up_sample_steps = 4
        perturb = 1.0
    }
}
